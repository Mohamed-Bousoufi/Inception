WHAT'S IS CGI

CGI stands for “Common Gateway Interface.”
It is a standard protocol that defines how web servers
can interact with external applications or scripts to 
process HTTP requests and generate dynamic web content. 

Here’s a basic overview of how CGI works:

Client sends an HTTP request to the web server.

The web server receives the request and identifies that the requested content requires dynamic processing.

The web server passes the request to the CGI program or script along with the necessary environment variables and data from the request (e.g., query parameters, form data, etc.).

The CGI program processes the request and generates the dynamic content, typically in the form of HTML.

The CGI program sends the generated content back to the web server.

The web server returns the dynamic content in the HTTP response to the client, which renders it in the web browser.

FastCGI:

With traditional CGI, a new process is spawned for each request, leading to a significant performance overhead. FastCGI improves upon this by introducing a persistent application process pool that remains alive even after processing a request. This process pool eliminates the need to start a new process for each incoming request, reducing the overhead and providing better performance and resource utilization.

Here’s how FastCGI works:

Client sends an HTTP request to the web server.

The web server passes the request to the FastCGI application via a socket or TCP/IP connection, along with the necessary environment variables and request data.

The FastCGI application processes the request and generates the dynamic content (e.g., HTML, JSON, etc.).

Instead of terminating the application process, the FastCGI process remains alive and waits for the next request.

The web server receives the response from the FastCGI application and sends it back to the client in the HTTP response.

In summary, FastCGI is an extension of CGI that significantly improves the performance and resource utilization of web applications by employing a persistent application process pool to handle incoming requests.

PHP-FPM

FastCGI Process Management: PHP-FPM uses a process manager to control PHP child processes. These child processes handle incoming PHP requests, and PHP-FPM manages them based on configuration settings. The process manager allows for better control of process spawning, termination, and resource management, resulting in improved performance and reduced resource usage.

Customizable Configuration: PHP-FPM allows users to customize the process manager’s behavior and configuration to match the server’s resources and requirements. This enables users to fine-tune PHP-FPM for optimal performance and stability.